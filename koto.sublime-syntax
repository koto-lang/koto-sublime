%YAML 1.2
---

# See http://www.sublimetext.com/docs/3/syntax.html#ver-dev
# See https://www.sublimetext.com/docs/3/scope_naming.html
name: Koto
file_extensions:
  - koto
scope: source.koto

variables:
  ident: '([[:alpha:]_][[:alnum:]_]*)'

contexts:
  prototype:
    - include: comments

  main:
    - include: assertions
    - include: braces
    - include: keywords
    - include: numbers
    - include: operators
    - include: strings
    - include: values

  assertions:
    - match: '\b(assert|assert_eq|assert_ne|assert_near)\b'
      scope: keyword.control.flow.assert.koto

  braces:
    - match: \{
      scope: punctuation.section.braces.begin.koto
      push: inline_map
    - match: \(
      scope: punctuation.section.parens.begin.koto
      push: parenthesized_expression
    - match: \[
      scope: punctuation.section.brackets.begin.koto
      push: list

  inline_map:
    - include: main
    - clear_scopes: true
    - meta_scope: meta.braces.koto
    - match: \}
      scope: punctuation.section.braces.end.koto
      pop: true

  parenthesized_expression:
    - include: main
    - clear_scopes: true
    - meta_scope: meta.parens
    - match: \)
      scope: punctuation.section.parens.end.koto
      pop: true

  list:
    - include: main
    - clear_scopes: true
    - meta_scope: meta.brackets
    - match: \]
      scope: punctuation.section.brackets.end.koto
      pop: true

  keywords:
    - match: '\b(catch|finally|for|in|loop|throw|try|until|while)\b'
      scope: keyword.control.koto
    - match: '\b(else|if|match|switch|then)\b'
      scope: keyword.control.conditional.koto
    - match: '\b(export|from|import)\b'
      scope: keyword.control.import
    - match: '\b(false|true)\b'
      scope: constant.language.koto
    - match: '\b(self)\b'
      scope: variable.language.koto
    - match: '\b(break|continue|return|yield)\b'
      scope: keyword.control.flow.koto

  values:
    - match: '\b{{ident}}(?=\:)'
      scope: entity.name.function.koto
    - match: '\b(?!\.\.)(?<=\.){{ident}}\b'
      scope: variable.function.koto
    - match: '\b{{ident}}'
      scope: variable.other.koto

  numbers:
    - match: '\b-?[0-9]*\.?[0-9]+(e[-+]?[0-9]+)?\b'
      scope: constant.numeric.koto
    - match: '\b-?0b[01]+\b'
      scope: constant.numeric.integer.binary.koto
    - match: '\b-?0o[0-7]+\b'
      scope: constant.numeric.integer.octal.koto
    - match: '\b-?0x[0-9a-fA-F]+\b'
      scope: constant.numeric.integer.hexadecimal.koto

  operators:
    - match: \+=|-=|\*=|/=|%=
      scope: keyword.operator.assignment.augmented.koto
    - match: \+|\-|\*|/|%|
      scope: keyword.operator.arithmetic.koto
    - match: <\=|>\=|\=\=|<|>|\!\=
      scope: keyword.operator.comparison.koto
    - match: '=(?!=)'
      scope: keyword.operator.assignment.koto
    - match: \b(and|not|or)\b
      scope: keyword.operator.word.koto
    - match: \|
      scope: keyword.variable.function.koto
    - match: \.\.\=|\.\.\.|\.\.
      scope: keyword.operator.bitwise.koto
    - match: \@
      scope: entity.name.impl.koto

  strings:
    - match: '"'
      scope: punctuation.definition.string.begin.koto
      push: double_quoted_string
    - match: "'"
      scope: punctuation.definition.string.begin.koto
      push: single_quoted_string
    - include: raw_string

  single_quoted_string:
    - include: inside_string
    - meta_scope: string.quoted.single.koto
    - meta_include_prototype: false
    - match: "'"
      scope: punctuation.definition.string.end.koto
      pop: true

  double_quoted_string:
    - include: inside_string
    - meta_scope: string.quoted.double.koto
    - meta_include_prototype: false
    - match: '"'
      scope: punctuation.definition.string.end.koto
      pop: true

  inside_string:
    - match: '\\[rnt\"\$]'
      scope: constant.character.escape.koto
    - match: "\\\\'"
      scope: constant.character.escape.koto
    - match: '\\x[0-9a-fA-F]{2}'
      scope: constant.character.escape.koto
    - match: '\\u{[0-9a-fA-F]{1,6}}'
      scope: constant.character.escape.koto
    - match: '\${{ident}}'
      scope: punctuation.section.interpolation.koto
    - match: '\${'
      scope: punctuation.section.interpolation.begin.koto
      push: string_interpolation_expression

  string_interpolation_expression:
    - include: main
    - clear_scopes: true
    - meta_scope: meta.interpolation.koto
    - match: \}
      scope: punctuation.section.interpolation.end.koto
      pop: true

  raw_string:
    - match: r(#{0,255})("|')
      scope: punctuation.definition.string.begin.koto
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.raw.koto
        - match: '\2\1'
          scope: punctuation.definition.string.end.koto
          pop: true

  comments:
    - match: '#-'
      scope: punctuation.definition.comment.koto
      push:
        - meta_scope: comment.block.koto
        - include: comments
        - match: '-#'
          pop: true
    - match: '#'
      scope: punctuation.definition.comment.koto
      push:
        - meta_scope: comment.line.koto
        - match: $\n?
          pop: true
